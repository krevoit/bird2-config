define BOGON_ASNS = [ 0,                      # RFC 7607
                      23456,                  # RFC 4893 AS_TRANS
                      64496..64511,           # RFC 5398 and documentation/example ASNs
                      64512..65534,           # RFC 6996 Private ASNs
                      65535,                  # RFC 7300 Last 16 bit ASN
                      65536..65551,           # RFC 5398 and documentation/example ASNs
                      65552..131071,          # RFC IANA reserved ASNs
                      4200000000..4294967294, # RFC 6996 Private ASNs
                      4294967295 ];           # RFC 7300 Last 32 bit ASN
define TRANSIT_ASNS = [ 174,                  # Cogent
                        209,                  # Qwest (HE carries this on IXPs IPv6 (Jul 12 2018))
                        701,                  # UUNET
                        702,                  # UUNET
                        1239,                 # Sprint
                        1299,                 # Telia
                        2914,                 # NTT Communications
                        3257,                 # GTT Backbone
                        3320,                 # Deutsche Telekom AG (DTAG)
                        3356,                 # Level3
                        3549,                 # Level3
                        3561,                 # Savvis / CenturyLink
                        4134,                 # Chinanet
                        5511,                 # Orange opentransit
                        6453,                 # Tata Communications
                        6461,                 # Zayo Bandwidth
                        6762,                 # Seabone / Telecom Italia
                        7018 ];               # AT&T
define BOGON_PREFIXES = [ ::/8+,                         # RFC 4291 IPv4-compatible, loopback, et al 
                          0100::/64+,                    # RFC 6666 Discard-Only
                          2001:2::/48+,                  # RFC 5180 BMWG
                          2001:10::/28+,                 # RFC 4843 ORCHID
                          2001:db8::/32+,                # RFC 3849 documentation
#                          2002::/16+,                    # RFC 7526 6to4 anycast relay
                          3ffe::/16+,                    # RFC 3701 old 6bone
                          fc00::/7+,                     # RFC 4193 unique local unicast
                          fe80::/10+,                    # RFC 4291 link local unicast
                          fec0::/10+,                    # RFC 3879 old site local unicast
                          ff00::/8+                      # RFC 4291 multicast
 ];

function reject_rpki_invalid_v4()
{
    if (roa_check(r4, net, bgp_path.last_nonaggregated) = ROA_INVALID) then {
        print "Reject: RPKI invalid v4: ", net, " ", bgp_path;
        reject;
    }
}

function reject_rpki_invalid_v6()
{
    if (roa_check(r6, net, bgp_path.last_nonaggregated) = ROA_INVALID) then {
        print "Reject: RPKI invalid v6: ", net, " ", bgp_path;
        reject;
    }
}

function reject_bogon_asns()
int set bogon_asns;
{
    bogon_asns = BOGON_ASNS;
    if ( bgp_path ~ bogon_asns ) then {
        print "Reject: bogon AS_PATH: ", net, " ", bgp_path;
        reject;
    }
}

function reject_bogon_prefixes_v4()
#prefix set bogon_prefixes;
{
#    bogon_prefixes = BOGON_PREFIXES;
#
#    if ( net ~ bogon_prefixes ) then {
#        print "Reject: Bogon prefix: ", net, " ", bgp_path;
#        reject;
#    }
}

function reject_bogon_prefixes_v6()
prefix set bogon_prefixes;
{
    bogon_prefixes = BOGON_PREFIXES;
    if ( net ~ bogon_prefixes ) then {
        print "Reject: Bogon prefix: ", net, " ", bgp_path;
        reject;
    }
}

function reject_small_prefixes_v4()
{
        if (net.len > 24) then {
                print "Reject: Too small prefix: ", net, " ", bgp_path;
                reject;
        }
}

function reject_small_prefixes_v6()
{
        if (net.len > 48) then {
                print "Reject: Too small prefix: ", net, " ", bgp_path;
                reject;
        }
}

function reject_default_route()
{
	if (net.len = 0) then {
		print "Reject: Default route: ", net, "", bgp_path;
		reject;
	}
}

function reject_long_aspaths()
{
    if ( bgp_path.len > 100 ) then {
        print "Reject: Too long AS path: ", net, " ", bgp_path;
        reject;
    }
}
function export_downstreams_to_upstreams_v6(int prepends) {
    # Check if the route was accepted from the AS38041 import filter
    if net ~ AS38041_Allowed_v6 then {
        # Apply any specific logic for export, such as setting communities or prepending
        # Here, prepending your ASN a specified number of times to the route as an example
             if prepends >= 1 then {
            bgp_path.prepend(40916);
        }
    reject; # Default action is to reject if the condition is not met
}
}
